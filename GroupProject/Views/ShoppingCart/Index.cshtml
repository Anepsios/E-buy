@model GroupProject.ViewModel.ShoppingCartViewModel

@{ ViewBag.Title = "Shopping Cart"; }

@* OM: Maybe center everything, make links into cute buttons or sth.
    also update Cart.cshtml if we plan to keep them the same.
    Or just scrap this one completely and only keep that view.*@

<script src="~/Scripts/jquery-3.4.1.min.js" type="text/javascript"></script>

<script type="text/javascript">

    $(function () {
        // Document.ready -> link up remove event handler
        $(".RemoveLink").click(function () {
            // Get the id from the link
            var recordToDelete = $(this).attr("data-id");
            if (recordToDelete != '') {
                // Perform the ajax post
                var url = '@Url.Action("RemoveFromCart", "ShoppingCart")';
                $.post(url, { "id": recordToDelete }, function (data) {
                    // Successful requests get here
                    // Update the page elements
                    if (data.ItemCount == 0) {
                        // OM: fadeout product with 0 quantity
                        $('#row-' + data.DeleteId).fadeOut('slow');
                    } else {
                        // OM: Or just show new product quantity
                        $('#item-count-' + data.DeleteId).text(data.ItemCount);
                    }
                    $('#cart-total').text(data.CartTotal);
                    // OM: convert " character since it doesnt pass correctly in js from json
                    let updateMessage = GetUpdateMessage(data.Message);
                    $('#update-message').text(updateMessage);
                    $('#cart-status').text('Cart (' + data.CartCount + ')');
                });
            }
        });

    });

    function GetUpdateMessage(updateMessage) {
        let message;
        if (updateMessage.includes('&quot;')) {
            message = updateMessage.split('&quot;');
            message = message[0] + '"' + message[1];
        }
        else {
            message = updateMessage;
        }
        return (message);
    }

    function handleUpdate() {
        // Load and deserialize the returned JSON data
        var json = context.get_data();
        var data = Sys.Serialization.JavaScriptSerializer.deserialize(json);
    }

</script>

<h3>
    <em>Review</em> your items:
</h3>
<p>
    @Html.ActionLink("Pay With Paypal", "Index", "Checkout", null, new { @class = "btn btn-success" })
    @Html.ActionLink("Pay With Card", "CreditCard", "Checkout", null, new { @class = "btn btn-success" })
</p>
<div id="update-message">
</div>
<table>
    <tr>
        <th style="min-width:150px; padding-right:10px;">
            Product
        </th>
        <th style="min-width:100px;">
            Price
        </th>
        <th>
            Quantity
        </th>
        <th></th>
    </tr>
    @foreach (var item in Model.CartItems)
    {
        <tr id="row-@item.ID">
            <td>
                @Html.ActionLink(item.Product.Name, "Details", "Products", new { id = item.ProductID }, new { @class = "hyperlink" })
            </td>
            <td>
                @item.Product.Price€
            </td>
            <td id="item-count-@item.ID">
                @item.Quantity
            </td>
            <td>
                <a href="#" class="RemoveLink hyperlink" data-id="@item.ID">Remove from cart</a>
            </td>
        </tr>
    }
    <tr>
        <td>
            Total
        </td>
        <td>
        </td>
        <td>
        </td>
        <td id="cart-total">
            @Model.CartTotal
        </td>
    </tr>
</table>